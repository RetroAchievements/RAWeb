env:
  browser: true

extends:
  - eslint:recommended
  - plugin:prettier/recommended
  - plugin:@typescript-eslint/recommended
  - plugin:react/recommended
  - plugin:react-hooks/recommended
  - plugin:@tanstack/eslint-plugin-query/recommended

parser: "@typescript-eslint/parser"
plugins:
  - "@typescript-eslint"
  - simple-import-sort
  - import
  - jsx-a11y
  - unicorn
  - vitest

ignorePatterns:
  - generated.d.ts
  - ziggy.d.ts

settings:
  # allows for tsconfig path aliases
  import/resolver:
    typescript: {} # this loads tsconfig.json to eslint

  react:
    version: detect

globals:
  Atomics: readonly
  SharedArrayBuffer: readonly

# very basic javascript
parserOptions:
  ecmaVersion: 6
  sourceType: module

rules:
  # some javascript functions are used within html attributes rendered within php
  no-unused-vars: off

  max-len: off

  # eslint doesn't like itself
  prefer-destructuring: off

  # yeah, we're polluting the global namespace with jquery...
  no-undef: off

  # ouch. refactor affected code...
  no-eval: off

  # let's at least have console output. at least no alerts, right? right!?
  no-console: off

  # ++ in for loop
  no-plusplus: off

  # ecmaVersion 5...
  comma-dangle: off
  no-alert: off # still using confirm() dialog
  no-restricted-globals: off # still using confirm() dialog
  no-loop-func: off
  no-shadow: off # typescript-eslint is not happy about injecting Alpine and/or utils into `window`
  no-param-reassign: off
  no-var: off
  object-shorthand: off
  prefer-arrow-callback: off
  prefer-rest-params: off
  prefer-template: off
  func-names: off
  no-useless-escape: off # not so sure about regex there it seems
  no-use-before-define: off
  vars-on-top: off

  # sort and organize imports/exports
  simple-import-sort/imports: error
  simple-import-sort/exports: error
  import/first: error
  import/newline-after-import: error
  import/no-duplicates: error

  # typescript niceties
  '@typescript-eslint/consistent-type-imports': error

  # tailwind.config.js
  global-require: off

  # set up prettier as an eslint plugin
  prettier/prettier:
    - error
    - {
      "tabWidth": 2,
      "printWidth": 100,
      "singleQuote": true,
      "tailwindAttributes": ["containerClassName", "gameTitleClassName", "wrapperClassName"],
      "plugins": ["prettier-plugin-tailwindcss"]
    }

  # some react recommended rules are fine to avoid in typescript projects
  react/display-name: off
  react/no-unescaped-entities: off
  react/prop-types: off
  react/react-in-jsx-scope: off
  react/jsx-no-target-blank: off # we don't support the old browsers this rule tries to protect
  react/jsx-no-literals: error # enforce i18n
  
  # disable some of the more aggressive unicorn rules
  unicorn/filename-case: off
  unicorn/no-array-callback-reference: off
  unicorn/no-array-for-each: warn
  unicorn/no-null: off
  unicorn/prefer-module: off
  unicorn/prefer-node-protocol: off
  unicorn/prefer-switch: off

  # similar to pint, force a newline before return statements
  newline-before-return: error

  # prevent accidental imports from libraries that build the Base* components
  no-restricted-imports:
    - error
    - patterns:
      - '@testing-library/react'
      - '@radix-ui/*'
      - 'sonner'
      - 'vaul'

# don't enforce explicit-any rule in test files
overrides:
  - files:
      - "*.test.ts"
      - "*.test.tsx"
    extends:
      - plugin:testing-library/react
    rules:
      "@typescript-eslint/no-explicit-any": off
      testing-library/no-dom-import: off
      testing-library/no-render-in-lifecycle: off
      react/jsx-no-literals: off

